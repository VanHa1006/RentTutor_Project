@page
@model RentTutorPresentation.Pages.Tutor.Student_resquestModel
@{
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Courses management</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

    <style>
        body {
            font-family: 'Plus Jakarta Sans', sans-serif;
        }

    </style>
</head>
<body>
    <div class="bg-white w-full flex flex-col gap-5 px-3 md:px-16 lg:px-28 md:flex-row text-[#161931]">
        <aside class="hidden py-4 md:w-1/3 lg:w-1/4 md:block">
            <div class="sticky flex flex-col gap-2 p-4 text-sm border-r border-indigo-100 top-12">
                <h2 class="pl-3 mb-4 text-2xl font-semibold">Settings</h2>

                <a href="/Tutor/Tutor-Profile" class="flex items-center px-3 py-2.5 font-semibold hover:text-indigo-900 hover:border hover:rounded-full">
                    Public Profile
                </a>
                <a href="/Tutor/Courses-manage" class="flex items-center px-3 py-2.5 font-semibold hover:text-indigo-900 hover:border hover:rounded-full">
                    Courses Manage
                </a>
                <a href="/Tutor/Orders-manage" class="flex items-center px-3 py-2.5 font-semibold hover:text-indigo-900 hover:border hover:rounded-full">
                    Orders Manage
                </a>
                <a href="/Tutor/Student-resquest" class="flex items-center px-3 py-2.5 font-bold bg-white text-indigo-900 border rounded-full">
                    Student Resquest
                </a>
            </div>
        </aside>

        @*  -------------------------------------------Main------------------------------------------------ *@

        <main class="w-full min-h-screen py-1 md:w-2/3 lg:w-3/4">
            <div class="p-2 md:p-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 gap-4">
                <!-- Card -->
 @if (Model.OrderDetail?.Items != null && Model.OrderDetail.Items.Any())
                    {
                @foreach (var item in Model.OrderDetail.Items)
                {
                    var reasonInputId = $"decisionInput_{item.OrderDetailId}_{item.Course.CourseId}";
                    var decisionInputId = $"reasonInput_{item.OrderDetailId}_{item.Course.CourseId}";
                    var acceptFormId = $"acceptForm_{item.OrderDetailId}_{item.Course.CourseId}";
                    var rejectFormId = $"rejectForm_{item.OrderDetailId}_{item.Course.CourseId}";

                        <div class="bg-white p-4 rounded-lg shadow-lg w-[300px]">
                            <div class="flex items-center mb-4">
                                <img src="/img/Avatar07.jpg" alt="Student Image" class="w-32 h-32 rounded-lg border-2 border-gray-300 mr-4">

                            <div>
                                <h4 class="text-lg font-semibold">OrderID: @item.OrderId</h4>
<p class="text-gray-600">Username: @item.Order.Student.StudentNavigation.FullName</p>
                                <p class="text-gray-600">Course: @item.Course.CourseName</p>
                                <p class="text-gray-600">Order-Date: @item.Order.OrderDate</p>
                            </div>
                            </div>

                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700">Title</label>
                                <input id="@decisionInputId" name="Decision" type="text" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                            </div>
                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700">Description</label>
                                <textarea id="@reasonInputId" name="Reason" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"></textarea>
                            </div>

                            <div class="flex items-center justify-center space-x-4">
                                <form id="@acceptFormId" method="post" asp-page-handler="Accept">
                                    <input type="hidden" name="OrderDetailId" value="@item.OrderDetailId" />
                                    <button type="submit" class="bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-lg" onclick="submitForm('@acceptFormId', '@decisionInputId', '@reasonInputId', 'accept', event)">Accept</button>
                                </form>

                                <form id="@rejectFormId" method="post" asp-page-handler="Reject">
                                    <input type="hidden" name="OrderDetailId" value="@item.OrderDetailId" />
                                    <button type="submit" class="bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded-lg" onclick="submitForm('@rejectFormId', '@decisionInputId', '@reasonInputId', 'reject', event)">Reject</button>
                                </form>
                            </div>
                       @*  <div class="flex items-center justify-center space-x-4">
                            <form id="@acceptFormId" method="post" asp-page-handler="Accept">
                                <input type="hidden" name="OrderDetailId" value="@item.OrderDetailId" />
                                <button type="submit" class="bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-lg" onclick="submitForm('@acceptFormId', '@decisionInputId', '@reasonInputId', event)">Accept</button>
                            </form>

                            <form id="@rejectFormId" method="post" asp-page-handler="Reject">
                                <input type="hidden" name="OrderDetailId" value="@item.OrderDetailId" />
                                <button type="submit" class="bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded-lg" onclick="submitForm('@rejectFormId', '@decisionInputId', '@reasonInputId', event)">Reject</button>
                            </form>
                        </div> *@
                        </div>
                    
                    }
                }
                else
                {
                    <div>No orders available.</div>
                }
                <script>
                    function submitForm(formId, decisionInputId, reasonInputId, action, event) {
                        event.preventDefault(); // Ngăn chặn việc gửi form mặc định

                        var decision = document.getElementById(decisionInputId).value;
                        var reason = document.getElementById(reasonInputId).value;

                        var form = document.getElementById(formId);

                        // Create hidden inputs for Decision and Reason
                        var decisionInput = document.createElement('input');
                        decisionInput.type = 'hidden';
                        decisionInput.name = 'Decision';
                        decisionInput.value = decision;

                        var reasonInput = document.createElement('input');
                        reasonInput.type = 'hidden';
                        reasonInput.name = 'Reason';
                        reasonInput.value = reason;

                        form.appendChild(decisionInput);
                        form.appendChild(reasonInput);

                        form.submit();

                        setTimeout(function () {
                            displayToast(action);
                        }, 3000);
                    }
                    function displayToast(action) {
                        // Create the toast container if it doesn't exist
                        var toastContainer = document.getElementById('toastContainer');
                        if (!toastContainer) {
                            toastContainer = document.createElement('div');
                            toastContainer.id = 'toastContainer';
                            toastContainer.style.position = 'fixed';
                            toastContainer.style.bottom = '20px';
                            toastContainer.style.right = '20px';
                            toastContainer.style.zIndex = '9999';
                            document.body.appendChild(toastContainer);
                        }

                        // Create the toast notification
                        var toast = document.createElement('div');
                        toast.style.minWidth = '250px';
                        toast.style.padding = '15px';
                        toast.style.borderRadius = '8px';
                        toast.style.color = '#fff';
                        toast.style.textAlign = 'left';
                        toast.style.display = 'flex';
                        toast.style.alignItems = 'center';
                        toast.style.marginBottom = '10px';

                        
                        var svgIcon, message;
                        if (action === 'accept') {
                            toast.style.backgroundColor = '#28a745'; 
                            svgIcon = `
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" style="width:24px;height:24px;margin-right:10px;">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                </svg>`;
                            message = 'The student has been accepted into the course.';
                        } else {
                            toast.style.backgroundColor = '#dc3545'; 
                            svgIcon = `
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" style="width:24px;height:24px;margin-right:10px;">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>`;
                            message = 'The student was denied entry to the course.';
                        }

                       
                        toast.innerHTML = `${svgIcon}<span>${message}</span>`;

                        // Append the toast to the container
                        toastContainer.appendChild(toast);

                        // Remove the toast after 5 seconds
                        setTimeout(function () {
                            toastContainer.removeChild(toast);
                        }, 5000);
                    }

                </script>
                

            </div>
        </main>  
    </div>


</body>
</html>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}